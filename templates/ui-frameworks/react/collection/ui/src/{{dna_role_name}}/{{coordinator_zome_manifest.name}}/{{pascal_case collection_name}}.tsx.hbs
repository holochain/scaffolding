import { Link, SignalCb, HolochainError{{#if (eq collection_type.type "ByAuthor")}}, AgentPubKey{{/if}}{{#if (eq referenceable.hash_type "EntryHash")}}, NewEntryAction{{/if}} } from '@holochain/client';
import  { FC, useCallback, useState, useEffect, useContext } from 'react';

import type { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';
import {{pascal_case referenceable.name}}Detail from './{{pascal_case referenceable.name}}Detail';
import { ClientContext } from '../../ClientContext';

const {{pascal_case collection_name}}: FC{{#if (eq collection_type.type "ByAuthor")}}<{{pascal_case collection_name}}Props>{{/if}} = ({{#if (eq collection_type.type "ByAuthor")}}{author}{{/if}}) => {
  const {client} = useContext(ClientContext);
  const [hashes, setHashes] = useState<Uint8Array[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<HolochainError | undefined>();

  const fetch{{pascal_case (plural referenceable.name)}} = useCallback(async () => {
    setLoading(true)
    try {
      const links: Link[] = await client?.callZome({
        role_name: '{{dna_role_name}}',
        zome_name: '{{snake_case coordinator_zome_manifest.name}}',
        fn_name: 'get_{{snake_case collection_name}}',
        {{#if (eq collection_type.type "ByAuthor")}}payload: author,{{/if}}
      });
      if (links?.length) {
        setHashes(links.map((l) => l.target));
      }
    } catch (e) {
      setError(e as HolochainError);
    } finally {
      setLoading(false);
    }
  }, [client{{#if (eq collection_type.type "ByAuthor")}}, author{{/if}}]);

  const handleSignal: SignalCb = useCallback((signal) => {
    if (signal.type !== "app") return;
    if (signal.value.zome_name !== '{{coordinator_zome_manifest.name}}') return;
    const payload = signal.value.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
    if (payload.type !== 'EntryCreated') return;
    if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
{{#if (eq collection_type.type "ByAuthor")}}
    if (author.toString() !== client?.myPubKey.toString()) return;
{{/if}}
    setHashes((prevHashes) => [...prevHashes, {{#if (eq referenceable.hash_type "ActionHash")}}payload.action.hashed.hash{{else}}(payload.action.hashed.content as NewEntryAction).entry_hash{{/if}}]);
  }, [setHashes]);

  useEffect(() => {
{{#if (eq collection_type.type "ByAuthor")}}
    if (author === undefined) {
      throw new Error(`The author prop is required for the {{pascal_case collection_name}} element`);
    }
{{/if}}
    fetch{{pascal_case (plural referenceable.name)}}();
    client?.on('signal', handleSignal);
  }, [client, handleSignal, fetch{{pascal_case (plural referenceable.name)}}{{#if (eq collection_type.type "ByAuthor")}}, author{{/if}}]);

  if (loading) {
    return <progress />;
  }

  return (
    <div>
      {error ? (
        <div className="alert">Error fetching the {{lower_case (plural referenceable.name)}}: {error.message}</div>
      ) : hashes.length > 0 ? (
        <div>
          {hashes.map((hash, i) => (
            <{{pascal_case referenceable.name}}Detail key={i} {{camel_case referenceable.name}}Hash={hash} on{{pascal_case referenceable.name}}Deleted={fetch{{pascal_case (plural referenceable.name)}}} />
          ))}
        </div>
      ) : (
        <div className="alert">No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</div>
      )}
    </div>
  );
};

{{#if (eq collection_type.type "ByAuthor")}}
interface {{pascal_case collection_name}}Props {
  author: AgentPubKey
}
{{/if}}

export default {{pascal_case collection_name}};