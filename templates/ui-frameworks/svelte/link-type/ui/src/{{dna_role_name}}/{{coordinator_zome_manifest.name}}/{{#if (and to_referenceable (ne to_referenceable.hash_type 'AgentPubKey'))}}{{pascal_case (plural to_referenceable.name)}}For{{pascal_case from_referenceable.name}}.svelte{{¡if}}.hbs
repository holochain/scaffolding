<script lang="ts">
import { onMount } from 'svelte';
import type { Link, Record, EntryHash, ActionHash, AgentPubKey, NewEntryAction, HolochainError } from '@holochain/client';
import { SignalType } from '@holochain/client';
import { getClient } from "../../contexts";
import {{pascal_case to_referenceable.name}}Detail from './{{pascal_case to_referenceable.name}}Detail.svelte';
import type { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

export let {{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}};

const clientStore = getClient();

let hashes: Array<{{to_referenceable.hash_type}}> = [];
let loading = false;
let error: HolochainError | undefined = undefined;

function handleSignal(signal: any) {
  if (!(SignalType.App in signal)) return;
  if (signal.App.zome_name !== '{{coordinator_zome_manifest.name}}') return;

  const payload = signal.App.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
  if (payload.type !== 'LinkCreated') return;
  if (payload.link_type !== '{{pascal_case link_type_name}}') return;

  hashes = [...hashes, payload.action.hashed.content.target_address];
}

async function fetchLinks() {
  loading = true;
  try {
    const links: Array<Link> = await $clientStore.client?.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}',
      payload: {{camel_case from_referenceable.singular_arg}},
    });
    hashes = links?.map(l => l.target) || [];
  } catch (e) {
    error = e as HolochainError;
  } finally {
    loading = false;
  }
}

onMount(async () => {
  if (!{{camel_case from_referenceable.singular_arg}}) {
    throw new Error(
      `The {{camel_case from_referenceable.singular_arg}} input is required for the {{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} element`
    );
  }

  if ($clientStore.client) {
    await fetchLinks();
    $clientStore.client.on('signal', handleSignal);
  }
});
</script>

{#if loading }
<progress />
{:else if error}
<div class="alert">Error fetching {{lower_case (plural to_referenceable.name)}}: {error.message}.</div>
{:else if hashes.length === 0}
<div class="alert">No {{lower_case (plural to_referenceable.name)}} found for this {{lower_case from_referenceable.name}}.</div>
{:else}
<div>
  {#each hashes as hash}
    <{{pascal_case to_referenceable.name}}Detail {{camel_case to_referenceable.name}}Hash={hash} />
  {/each}
</div>
{/if}