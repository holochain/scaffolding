<script lang="ts">
import { onMount, getContext } from 'svelte';
import type {
  Link,
  Record,
  EntryHash,
  ActionHash,
  AgentPubKey,
  AppClient,
  NewEntryAction,
  HolochainError,
} from '@holochain/client';
import { type ClientContext, clientContext } from '../../contexts';
import {{pascal_case to_referenceable.name}}Detail from './{{pascal_case to_referenceable.name}}Detail.svelte';
import type { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

let client: AppClient;
const appClientContext = getContext<ClientContext>(clientContext);

let hashes: Array<{{to_referenceable.hash_type}}> | undefined;
let loading = false;
let error: any = undefined;

export let {{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}};

$: hashes, loading, error;

onMount(async () => {
  if (!{{camel_case from_referenceable.singular_arg}}) {
    throw new Error(`The {{camel_case from_referenceable.singular_arg}} input is required for the {{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} element`);
  }
  client = await appClientContext.getClient();
  try {
    loading = true;
    const links: Array<Link> = await client.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}',
      payload: {{camel_case from_referenceable.singular_arg}},
    });
    hashes = links.map(l => l.target);
  } catch (e) {
    error = e as HolochainError;
  } finally {
    loading = false;
  }

  client.on('signal', signal => {
    if (signal.type !== "app") return;
    if (signal.value.zome_name !== '{{coordinator_zome_manifest.name}}') return;
    const payload = signal.value.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
    if (payload.type !== 'LinkCreated') return;
    if (payload.link_type !== '{{pascal_case link_type_name}}') return;

    hashes = [...hashes, payload.action.hashed.content.target_address];
  });
});
</script>

{#if loading }
<progress />
{:else if error}
<div class="alert">Error fetching {{lower_case (plural to_referenceable.name)}}: {error.message}.</div>
{:else if hashes.length === 0}
<div class="alert">No {{lower_case (plural to_referenceable.name)}} found for this {{lower_case from_referenceable.name}}.</div>
{:else}
<div>
  {#each hashes as hash}
    <{{pascal_case to_referenceable.name}}Detail {{camel_case to_referenceable.name}}Hash={hash} />
  {/each}
</div>
{/if}