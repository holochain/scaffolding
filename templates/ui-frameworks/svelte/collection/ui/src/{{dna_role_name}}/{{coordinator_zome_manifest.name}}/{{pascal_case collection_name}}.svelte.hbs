<script lang="ts">
import { onMount } from 'svelte';
import type { EntryHash, Record, AgentPubKey, ActionHash, Link, NewEntryAction, HolochainError } from '@holochain/client';
import { getClient } from "../../contexts";
import {{pascal_case referenceable.name}}Detail from './{{pascal_case referenceable.name}}Detail.svelte';
import type { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

{{#if (eq collection_type.type "ByAuthor")}}
export let author: AgentPubKey;
{{/if}}

const clientStore = getClient();

let hashes: Array<{{referenceable.hash_type}}> = $state([]);
let loading = $state(false);
let error: HolochainError | undefined = $state(undefined);

async function fetch{{pascal_case (plural referenceable.name)}}() {
  loading = true;
  try {
    const links: Array<Link> = await client?.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{snake_case coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case collection_name}}',
      {{#if (eq collection_type.type "ByAuthor")}}
      payload: author,
      {{/if}}
    });

    hashes = links?.map(l => l.target) || [];
  } catch (e) {
    error = e as HolochainError;
  } finally {
    loading = false;
  }
}

function handleSignal(signal: any) {
  if (signal.type !== "app") return;
  if (signal.value.zome_name !== '{{coordinator_zome_manifest.name}}') return;
  const payload = signal.value.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
  if (payload.type !== 'EntryCreated') return;
  if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
{{#if (eq collection_type.type "ByAuthor")}}
  if (author.toString() !== client.myPubKey.toString()) return;
{{/if}}
  hashes = [...hashes, {{#if (eq referenceable.hash_type "ActionHash")}}payload.action.hashed.hash{{else}}(payload.action.hashed.content as NewEntryAction).entry_hash{{/if}}];
}

onMount(async () => {
  {{#if (eq collection_type.type "ByAuthor")}}
  if (!author) {
    throw new Error(`The author input is required for the {{pascal_case collection_name}} element`);
  }
  {{/if}}

  if ($clientStore.client) {
    await fetch{{pascal_case (plural referenceable.name)}}();
    $clientStore.client.on('signal', handleSignal);
  }
});

let { client } = $derived($clientStore);
$effect(() => {
  if (client) fetch{{pascal_case (plural referenceable.name)}}();
});
</script>

{#if loading}
<progress></progress>
{:else if error}
<div class="alert">Error fetching the {{lower_case (plural referenceable.name)}}: {error.message}.</div>
{:else if !hashes.length}
<div class="alert">No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</div>
{:else}
<div>
  {#each hashes as hash}
    <{{pascal_case referenceable.name}}Detail {{camel_case referenceable.name}}Hash={hash} {{kebab_case referenceable.name}}Deleted={() => fetch{{pascal_case (plural referenceable.name)}}()} />
  {/each}
</div>
{/if}