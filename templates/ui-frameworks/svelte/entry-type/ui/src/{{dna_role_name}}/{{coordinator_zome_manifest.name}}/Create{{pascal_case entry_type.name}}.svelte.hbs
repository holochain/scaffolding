<script lang="ts">
import { onMount } from 'svelte';
import type { Record, EntryHash, AgentPubKey, ActionHash, DnaHash, HolochainError } from '@holochain/client';
import { getClient } from '../../contexts';
import type { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}
    {{/if}}
  {{/each}}
{{/uniq_lines}}

const clientStore = getClient();

{{#each entry_type.fields}}
  {{#if widget }}
    {{#if (not (eq cardinality "vector" ) )}}
let {{camel_case field_name}}: {{> (concat field_type.type "/type") }}{{#if (eq cardinality "option")}} | undefined{{/if}} = $state({{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}});
    {{else}}
      {{#if (eq field_type.type "u8")}}
let {{camel_case field_name}}: Uint8Array = $state(new Uint8Array([{{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}}]));
      {{else}}
let {{camel_case field_name}}: Array<{{> (concat field_type.type "/type")}}> = $state([{{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}}]);
      {{/if}}
    {{/if}}
  {{/if}}
{{/each}}

interface Props {
{{#each entry_type.fields}}
  {{#if (not widget) }}
    {{#if (eq cardinality "vector")}}
      {{#if (eq field_type.type "u8")}}
  {{camel_case field_name}}: Uint8Array;
      {{else}}
  {{camel_case field_name}}: Array<{{> (concat field_type.type "/type") }}>;
      {{/if}}
    {{else}}
  {{camel_case field_name}}{{#if (eq cardinality "single")}}{{/if}}: {{> (concat field_type.type "/type") }}{{#if (eq cardinality "option")}} | undefined{{/if}};
    {{/if}}
  {{/if}}
{{/each}}
  {{kebab_case entry_type.name}}Created?: ({{camel_case entry_type.name}}Hash: ActionHash) => any;
}

let { {{#each entry_type.fields}}{{camel_case field_name}},{{/each}} {{kebab_case entry_type.name}}Created }: Props = $props();
let is{{pascal_case entry_type.name}}Valid = $derived(true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(camel_case field_name) }}{{/if}}{{#if (eq cardinality "vector")}} && {{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}});

onMount(() => {
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (ne cardinality "option")}}
  if ({{camel_case field_name}} === undefined) {
    throw new Error(`The {{camel_case field_name}} input is required for the Create{{pascal_case ../entry_type.name}} element`);
  }
      {{/if}}
    {{/if}}
  {{/each}}
});

async function create{{pascal_case entry_type.name}}() {
  if (!$clientStore.client) return;

  const {{camel_case entry_type.name}}Entry: {{pascal_case entry_type.name}} = {
    {{#each entry_type.fields}}
    {{snake_case field_name}}: {{camel_case field_name}}{{#if (eq cardinality "single")}}!{{/if}},
    {{/each}}
  };

  try {
    const record: Record = await $clientStore.client.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'create_{{snake_case entry_type.name}}',
      payload: {{camel_case entry_type.name}}Entry,
    });

    if ({{kebab_case entry_type.name}}Created) {{kebab_case entry_type.name}}Created(record.signed_action.hashed.hash);
  } catch (e) {
    alert((e as HolochainError).message);
  }
}
</script>

<div>
  <h3>Create {{pascal_case entry_type.name}}</h3>

{{#each entry_type.fields}}
  {{#if widget}}
  <div>
    {{#if (not (eq cardinality "vector") )}}
    {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(camel_case field_name) variable_to_change=(camel_case field_name) required=(eq cardinality "single") }}
    {{else}}
    {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
    {{/if}}
  </div>
  {{/if}}
{{/each}}

  <button disabled={!is{{pascal_case entry_type.name}}Valid} onclick={() => create{{pascal_case entry_type.name}}()}>
    Create {{pascal_case entry_type.name}}
  </button>
</div>