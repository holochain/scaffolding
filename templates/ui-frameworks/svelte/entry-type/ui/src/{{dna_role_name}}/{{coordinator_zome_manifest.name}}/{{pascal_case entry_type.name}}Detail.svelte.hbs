<script lang="ts">
import { createEventDispatcher, onMount } from 'svelte';
import { decode } from '@msgpack/msgpack';
import type { Record, ActionHash, EntryHash, AgentPubKey, DnaHash, HolochainError } from '@holochain/client';
import { getClient } from "../../contexts";
import type { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
{{#if crud.update}}
import Edit{{pascal_case entry_type.name}} from './Edit{{pascal_case entry_type.name}}.svelte';
{{/if}}
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/detail/imports") }}
    {{/if}}
  {{/each}}
{{/uniq_lines}}

const dispatch = createEventDispatcher();
const clientStore = getClient();

export let {{camel_case entry_type.name}}Hash: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}};

let loading = false;
{{#if crud.update}}
let editing = false;
{{/if}}
let error: HolochainError | undefined;
let record: Record | undefined;
let {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} | undefined;

async function fetch{{pascal_case entry_type.name}}() {
  if (!$clientStore.client) return;
  
  loading = true;
  try {
    record = await $clientStore.client.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: '{{#if crud.update}}get_latest_{{snake_case entry_type.name}}{{else}}get_{{snake_case entry_type.name}}{{/if}}',
      payload: {{camel_case entry_type.name}}Hash,
    });
    
    if (record) {
      {{camel_case entry_type.name}} = decode((record.entry as any).Present.entry) as {{pascal_case entry_type.name}};
    }
  } catch (e) {
    error = e as HolochainError;
  } finally {
    loading = false;
  }
}

{{#if crud.delete}}
async function delete{{pascal_case entry_type.name}}() {
  if (!$clientStore.client) return;

  try {
    await $clientStore.client.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'delete_{{snake_case entry_type.name}}',
      payload: {{camel_case entry_type.name}}Hash,
    });
    
    dispatch('{{kebab_case entry_type.name}}-deleted', { 
      {{camel_case entry_type.name}}Hash 
    });
  } catch (e) {
    alert((e as HolochainError).message);
  }
}
{{/if}}

onMount(async () => {
  if ({{camel_case entry_type.name}}Hash === undefined) {
    throw new Error(
      `The {{camel_case entry_type.name}}Hash input is required for the {{pascal_case entry_type.name}}Detail element`
    );
  }

  if ($clientStore.client) {
    await fetch{{pascal_case entry_type.name}}();
  }
});
</script>

{#if loading}
<progress />
{:else if error}
<div class="alert">Error fetching the {{lower_case entry_type.name}}: {error.message}</div>
{{#if crud.update}}
{:else if editing}
<Edit{{pascal_case entry_type.name}}
  {{#if link_from_original_to_each_update}}
  original{{pascal_case entry_type.name}}Hash={ {{camel_case entry_type.name}}Hash}
  {{/if}}
  currentRecord={record}
  on:{{kebab_case entry_type.name}}-updated={async () => {
    editing = false;
    await fetch{{pascal_case entry_type.name}}()
  } }
  on:edit-canceled={() => { editing = false; } }
/>
{{/if}}
{:else}
<section>
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector") )}}
  <div>
    <span><strong>{{title_case field_name}}:</strong></span>
    <span>{{> (concat field_type.type "/" widget "/detail/render") variable_to_read=(concat (camel_case ../entry_type.name) "?." (snake_case field_name) ) }}</span>
  </div>
    {{else}}
  {{> Vec/detail/render variable_to_read=(concat (camel_case ../entry_type.name) "?." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
    {{/if}}
  {{/if}}
{{/each}}

  <div>
{{#if crud.update}}
    <button on:click={() => { editing = true; } }>edit</button>
{{/if}}
{{#if crud.delete}}
    <button on:click={() => delete{{pascal_case entry_type.name}}()}>delete</button>
{{/if}}
  </div>
</section>
{/if}