<script lang="ts">
import { createEventDispatcher, onMount } from 'svelte';
import type { Record, EntryHash, AgentPubKey, DnaHash, ActionHash, HolochainError } from '@holochain/client';
import { decode } from '@msgpack/msgpack';
import { getClient } from '../../contexts';
import type { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}
    {{/if}}
  {{/each}}
{{/uniq_lines}}

const dispatch = createEventDispatcher();
const clientStore = getClient();

export let currentRecord: Record;
{{#if link_from_original_to_each_update}}
export let original{{pascal_case entry_type.name}}Hash: ActionHash;
{{/if}}

let current{{pascal_case entry_type.name}}: {{pascal_case entry_type.name}} = decode((currentRecord.entry as any).Present.entry) as {{pascal_case entry_type.name}};

{{#each entry_type.fields}}
  {{#if widget }}
    {{#if (not (eq cardinality "vector" ) )}}
let {{camel_case field_name}}: {{> (concat field_type.type "/type")}} | undefined = current{{pascal_case ../entry_type.name}}.{{snake_case field_name}};
    {{else}}
      {{#if (eq field_type.type "u8")}}
let {{camel_case field_name}}: Uint8Array | undefined = current{{pascal_case ../entry_type.name}}.{{snake_case field_name}};
      {{else}}
let {{camel_case field_name}}: Array<{{> (concat field_type.type "/type")}} | undefined> = current{{pascal_case ../entry_type.name}}.{{snake_case field_name}};
      {{/if}}
    {{/if}}
  {{/if}}
{{/each}}

$: {{#each (filter entry_type.fields "widget")}}{{camel_case field_name}}{{#unless @last}}, {{/unless}}{{/each}};
$: is{{pascal_case entry_type.name}}Valid = true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(camel_case field_name) }}{{/if}}{{#if (eq cardinality "vector")}} && {{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};

onMount(() => {
  if (!currentRecord) {
    throw new Error(`The currentRecord input is required for the Edit{{pascal_case entry_type.name}} element`);
  }
  {{#if link_from_original_to_each_update}}
  if (!original{{pascal_case entry_type.name}}Hash) {
    throw new Error(`The original{{pascal_case entry_type.name}}Hash input is required for the Edit{{pascal_case entry_type.name}} element`);
  }
  {{/if}}
});

async function update{{pascal_case entry_type.name}}() {
  if (!$clientStore.client) return;

  const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = {
    {{#each entry_type.fields}}
      {{#if widget}}
        {{#if (eq cardinality "single") }}
    {{snake_case field_name}}: {{camel_case field_name}}!,
        {{else}}
    {{snake_case field_name}}: {{camel_case field_name}}{{#if (eq cardinality "vector") }} as Array<{{> (concat field_type.type "/type") }}>{{/if}},
        {{/if}}
      {{/if}}
    {{/each}}
    {{#each entry_type.fields}}
      {{#if (not widget)}}
    {{snake_case field_name}}: current{{pascal_case ../entry_type.name}}.{{snake_case field_name}},
      {{/if}}
    {{/each}}
  };

  try {
    const updateRecord: Record = await $clientStore.client.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'update_{{snake_case entry_type.name}}',
      payload: {
        {{#if link_from_original_to_each_update}}
        original_{{snake_case entry_type.name}}_hash: original{{pascal_case entry_type.name}}Hash,
        {{/if}}
        previous_{{snake_case entry_type.name}}_hash: currentRecord.signed_action.hashed.hash,
        updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
      }
    });

    dispatch('{{kebab_case entry_type.name}}-updated', {
      actionHash: updateRecord.signed_action.hashed.hash
    });
  } catch (e) {
    alert((e as HolochainError).message);
  }
}
</script>

<section>
{{#each entry_type.fields}}
  {{#if widget}}
  <div>
    {{#if (not (eq cardinality "vector") )}}
      {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(camel_case field_name) variable_to_change=(camel_case field_name) required=(eq cardinality "single") }}
    {{else}}
      {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
    {{/if}}
  </div>
  {{/if}}
{{/each}}

  <div>
    <button on:click={() => dispatch('edit-canceled')}>Cancel</button>
    <button disabled={!is{{pascal_case entry_type.name}}Valid} on:click={() => update{{pascal_case entry_type.name}}()}>
      Edit {{pascal_case entry_type.name}}
    </button>
  </div>
</section>