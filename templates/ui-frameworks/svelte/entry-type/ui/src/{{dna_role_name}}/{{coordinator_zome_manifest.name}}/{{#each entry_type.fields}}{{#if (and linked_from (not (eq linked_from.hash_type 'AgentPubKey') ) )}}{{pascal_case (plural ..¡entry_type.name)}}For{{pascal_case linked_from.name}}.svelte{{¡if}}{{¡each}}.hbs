<script lang="ts">
import { onMount } from 'svelte';
import type { Link, ActionHash, EntryHash, Record, AgentPubKey, NewEntryAction, HolochainError } from '@holochain/client';
import { SignalType } from '@holochain/client';
import { getClient } from '../../contexts';
import type { {{pascal_case ../entry_type.name}}, {{pascal_case ../coordinator_zome_manifest.name}}Signal } from './types';
import {{pascal_case ../entry_type.name}}Detail from './{{pascal_case ../entry_type.name}}Detail.svelte';

export let {{camel_case linked_from.singular_arg}}: {{linked_from.hash_type}};

const clientStore = getClient();

let hashes: Array<ActionHash> = [];
let loading = false;
let error: HolochainError | undefined = undefined;

async function fetch{{pascal_case (plural ../entry_type.name)}}() {
  loading = true;
  try {
    const links: Array<Link> = await $clientStore.client?.callZome({
      role_name: '{{../dna_role_name}}',
      zome_name: '{{../coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}',
      payload: {{camel_case linked_from.singular_arg}}
    });
    hashes = links?.map(l => l.target) || [];
  } catch (e) {
    error = e as HolochainError;
  } finally {
    loading = false;
  }
}

function handleSignal(signal: any) {
  if (!(SignalType.App in signal)) return;
  if (signal.App.zome_name !== '{{../coordinator_zome_manifest.name}}') return;
  const payload = signal.App.payload as {{pascal_case ../coordinator_zome_manifest.name}}Signal;
  if (!(payload.type === 'EntryCreated' && payload.app_entry.type === '{{pascal_case ../entry_type.name}}')) return;

  fetch{{pascal_case (plural ../entry_type.name)}}();
}

onMount(async () => {
  if ({{camel_case linked_from.singular_arg}} === undefined) {
    throw new Error(
      `The {{camel_case linked_from.singular_arg}} input is required for the {{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} element`
    );
  }

  if ($clientStore.client) {
    await fetch{{pascal_case (plural ../entry_type.name)}}();
    $clientStore.client.on('signal', handleSignal);
  }
});
</script>

{#if loading }
<progress />
{:else if error}
<div class="alert">Error fetching {{lower_case (plural ../entry_type.name)}}: ${error.message}.</div>
{:else if hashes.length === 0}
<div class="alert">No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case linked_from.name}}.</div>
{:else}
<div>
  {#each hashes as hash}
    <{{pascal_case ../entry_type.name}}Detail {{camel_case ../entry_type.name}}Hash={hash} on:{{kebab_case ../entry_type.name}}-deleted={fetch{{pascal_case (plural ../entry_type.name)}}} />
  {/each}
</div>
{/if}