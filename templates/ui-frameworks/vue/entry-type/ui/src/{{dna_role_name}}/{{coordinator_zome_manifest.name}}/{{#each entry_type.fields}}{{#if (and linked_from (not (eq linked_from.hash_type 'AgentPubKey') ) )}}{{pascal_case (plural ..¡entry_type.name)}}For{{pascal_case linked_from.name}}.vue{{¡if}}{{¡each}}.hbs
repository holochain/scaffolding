<template>
  <progress v-if="loading"></progress>
  <div class="alert" v-if="error">
    Error fetching the {{lower_case (plural ../entry_type.name)}}: {{ error.message }}
  </div>
  <div v-else-if="hashes && hashes.length > 0">
    <{{pascal_case ../entry_type.name}}Detail
      v-for="(hash, i) in hashes"
      :key="i"
      :{{kebab_case ../entry_type.name}}-hash="hash"
      @{{kebab_case ../entry_type.name}}-deleted="fetch{{pascal_case (plural ../entry_type.name)}}()"
    >
    </{{pascal_case ../entry_type.name}}Detail>
  </div>
  <div class="alert" v-else>No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case linked_from.name}}.</div>
</template>

<script setup lang="ts">
import { ref, onMounted, toRaw, inject, defineProps } from 'vue';
import { Link, ActionHash, EntryHash, HolochainError } from '@holochain/client';
import {{pascal_case ../entry_type.name}}Detail from './{{pascal_case ../entry_type.name}}Detail.vue';
import { {{pascal_case ../coordinator_zome_manifest.name}}Signal } from './types';
import { ClientKey } from '../../clientProvider';

const props = defineProps<{ {{camel_case linked_from.singular_arg}}: ActionHash | EntryHash }>();

const hashes = ref<Array<ActionHash> | undefined>(undefined);
const loading = ref(false);
const error = ref<HolochainError | undefined>(undefined);

const { client } = inject(ClientKey)!;

const fetch{{pascal_case (plural ../entry_type.name)}} = async () => {
  loading.value = true;
  try {
    const links: Array<Link> = await client.value?.callZome({
      role_name: '{{../dna_role_name}}',
      zome_name: '{{../coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}',
      payload: props.{{camel_case linked_from.singular_arg}},
    });
    hashes.value = links.map(l => l.target);
  } catch(e) {
    error.value = e;
  } finally {
    loading.value = false;
  }
}

onMounted(async () => {
  if (!props.{{camel_case linked_from.singular_arg}}) {
    throw new Error(`The {{camel_case linked_from.singular_arg}}Hash input is required for the {{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} element`);
  }

  await fetch{{pascal_case (plural ../entry_type.name)}}();

  toRaw(client.value)?.on('signal', async signal => {
    if (signal.type !== "app") return;
    if (signal.value.zome_name !== '{{../coordinator_zome_manifest.name}}') return;
    const payload = signal.value.payload as {{pascal_case ../coordinator_zome_manifest.name}}Signal;
    if (!(payload.type === 'EntryCreated' && payload.app_entry.type === '{{pascal_case ../entry_type.name}}')) return;
    await fetch{{pascal_case (plural ../entry_type.name)}}();
  });
});
</script>