<template>
  <div v-if="!loading">
{{#if crud.update}}
    <div v-if="editing && record">
      <Edit{{pascal_case entry_type.name}}
  {{#if link_from_original_to_each_update}}
        :original-{{kebab_case entry_type.name}}-hash="{{camel_case entry_type.name}}Hash"
  {{/if}}
        :current-record="record as Record"
        @{{kebab_case entry_type.name}}-updated="editing = false; fetch{{pascal_case entry_type.name}}();"
        @edit-canceled="editing = false"
      />
    </div>
{{/if}}
    <section v-if="record">
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector") )}}
      <div>
	      <span><strong>{{title_case field_name}}: </strong></span>
 	      <span>{{> (concat field_type.type "/" widget "/detail/render") variable_to_read=(concat (camel_case ../entry_type.name) "?." (snake_case field_name) ) }}</span>
      </div>
    {{else}}
      {{> Vec/detail/render variable_to_read=(concat (camel_case ../entry_type.name) "?." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
    {{/if}}

  {{/if}}
{{/each}}
      <div>
{{#if crud.update}}
        <button @click="editing = true">edit</button>
{{/if}}
{{#if crud.delete}}
        <button @click="delete{{pascal_case entry_type.name}}">delete</button>
{{/if}}
     </div>
    </section>
    <div class="alert" v-else>The requested {{lower_case entry_type.name}} was not found.</div>
  </div>
  <progress v-else></progress>
  <div class="alert" v-if="error">Error: {error.message}</div>
</template>

<script lang="ts">
import { inject, ComputedRef, defineComponent } from 'vue';
import { decode } from '@msgpack/msgpack';
import { AppClient, Record, AgentPubKey, EntryHash, ActionHash, DnaHash, HolochainError } from '@holochain/client';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/detail/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}
{{#if crud.update}}
import Edit{{pascal_case entry_type.name}} from './Edit{{pascal_case entry_type.name}}.vue';
{{/if}}

export default defineComponent({
{{#if crud.update}}
  components: {
    Edit{{pascal_case entry_type.name}},
  },
{{/if}}
  props: {
    {{camel_case entry_type.name}}Hash: {
      type: Object,
      required: true
    }
  },
  data(): {
      record: Record | undefined;
      loading: boolean;
      error: HolochainError | undefined;
{{#if crud.update}}
      editing: boolean;
{{/if}}
    } {
      return {
        record: undefined,
        loading: true,
        error: undefined,
  {{#if crud.update}}
        editing: false,
  {{/if}}
      }
  },
  computed: {
    {{camel_case entry_type.name}}() {
      if (!this.record) return;
      return decode((this.record.entry as any).Present.entry) as {{pascal_case entry_type.name}};
    }
  },
  async mounted() {
    if (this.{{camel_case entry_type.name}}Hash === undefined) {
      throw new Error(`The {{camel_case entry_type.name}}Hash input is required for the {{pascal_case entry_type.name}}Detail element`);
    }
    await this.fetch{{pascal_case entry_type.name}}();
  },
  methods: {
    async fetch{{pascal_case entry_type.name}}() {
      try {
        this.loading = true;
        this.record = await this.client.callZome({
          cap_secret: null,
          role_name: '{{dna_role_name}}',
          zome_name: '{{coordinator_zome_manifest.name}}',
          fn_name: '{{#if crud.update}}get_latest_{{snake_case entry_type.name}}{{else}}get_{{snake_case entry_type.name}}{{/if}}',
          payload: this.{{camel_case entry_type.name}}Hash,
        });
      } catch (e) {
        this.error = e as HolochainError;
      } finally {
        this.loading = false;
      }
    },
{{#if crud.delete}}
    async delete{{pascal_case entry_type.name}}() {
      try {
        this.loading = true
        await this.client.callZome({
          cap_secret: null,
          role_name: '{{dna_role_name}}',
          zome_name: '{{coordinator_zome_manifest.name}}',
          fn_name: 'delete_{{snake_case entry_type.name}}',
          payload: this.{{camel_case entry_type.name}}Hash,
        });
        this.$emit('{{kebab_case entry_type.name}}-deleted', this.{{camel_case entry_type.name}}Hash);
      } catch (e: any) {
        this.error = e as HolochainError;
      } finally {
        this.loading = false;
      }
    }
{{/if}}
  },
  emits: ['{{kebab_case entry_type.name}}-deleted'],
  setup() {
    const client = (inject('client') as ComputedRef<AppClient>).value;
    return { client };
  },
});
</script>