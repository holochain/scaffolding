<template>
  <div v-if="!loading">
{{#if crud.update}}
    <div v-if="editing && record">
      <Edit{{pascal_case entry_type.name}}
  {{#if link_from_original_to_each_update}}
        :original-{{kebab_case entry_type.name}}-hash="{{camel_case entry_type.name}}Hash"
  {{/if}}
        :current-record="record as Record"
        @{{kebab_case entry_type.name}}-updated="editing = false; fetch{{pascal_case entry_type.name}}();"
        @edit-canceled="editing = false"
      />
    </div>
{{/if}}
    <section v-if="record">
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector") )}}
      <div>
	      <span><strong>{{title_case field_name}}: </strong></span>
 	      <span>{{> (concat field_type.type "/" widget "/detail/render") variable_to_read=(concat (camel_case ../entry_type.name) "?." (snake_case field_name) ) }}</span>
      </div>
    {{else}}
      {{> Vec/detail/render variable_to_read=(concat (camel_case ../entry_type.name) "?." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
    {{/if}}

  {{/if}}
{{/each}}
      <div>
{{#if crud.update}}
        <button @click="editing = true">edit</button>
{{/if}}
{{#if crud.delete}}
        <button @click="delete{{pascal_case entry_type.name}}">delete</button>
{{/if}}
     </div>
    </section>
    <div class="alert" v-else>The requested {{lower_case entry_type.name}} was not found.</div>
  </div>
  <progress v-else></progress>
  <div class="alert" v-if="error">Error: {{ error.message }}</div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, inject, defineProps } from "vue";
import { decode } from '@msgpack/msgpack';
import { Record, EntryHash, ActionHash, HolochainError } from '@holochain/client';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/detail/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}
{{#if crud.update}}
import Edit{{pascal_case entry_type.name}} from './Edit{{pascal_case entry_type.name}}.vue';
{{/if}}
import { ClientKey } from "../../clientProvider";

const props = defineProps<{
  {{camel_case entry_type.name}}Hash: ActionHash | EntryHash
}>();

const emit = defineEmits<{ '{{kebab_case entry_type.name}}-deleted': [hash: Uint8Array] }>();

const record = ref<Record | undefined>(undefined);
const loading = ref(true);
const error = ref<HolochainError | undefined>(undefined);
{{#if crud.update}}
const editing = ref(false);
{{/if}}

const { client } = inject(ClientKey)!;

const {{camel_case entry_type.name}} = computed(() => {
  if (!record.value) return;
  return decode((record.value.entry as any).Present.entry) as {{pascal_case entry_type.name}};
});

const fetch{{pascal_case entry_type.name}} = async () => {
  try {
    loading.value = true;
    record.value = await client.value?.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: '{{#if crud.update}}get_latest_{{snake_case entry_type.name}}{{else}}get_{{snake_case entry_type.name}}{{/if}}',
      payload: props.{{camel_case entry_type.name}}Hash,
    });
  } catch(e) {
    error.value = e;
  } finally {
    loading.value = false;
  }
}

{{#if crud.delete}}
const delete{{pascal_case entry_type.name}} = async () => {
  try {
    loading.value = true
    await client.value?.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'delete_{{snake_case entry_type.name}}',
      payload: props.{{camel_case entry_type.name}}Hash,
    });
    emit('{{kebab_case entry_type.name}}-deleted', props.{{camel_case entry_type.name}}Hash);
  } catch(e) {
    error.value = e;
  } finally {
    loading.value = false;
  }
}
{{/if}}

onMounted(async () => {
  if (!props.{{camel_case entry_type.name}}Hash) {
    throw new Error(`The {{camel_case entry_type.name}}Hash input is required for the {{pascal_case entry_type.name}}Detail element`);
  }
  await fetch{{pascal_case entry_type.name}}();
});
</script>