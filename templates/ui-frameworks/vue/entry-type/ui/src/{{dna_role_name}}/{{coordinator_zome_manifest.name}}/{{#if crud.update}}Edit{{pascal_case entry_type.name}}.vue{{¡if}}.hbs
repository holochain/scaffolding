<template>
  <section>
{{#each entry_type.fields}}
  {{#if widget}}
      <div>
    {{#if (not (eq cardinality "vector") )}}
      {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(camel_case field_name) variable_to_change=(camel_case field_name) required=(eq cardinality "single")}}
    {{else}}
      {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
    {{/if}}
      </div>
  {{/if}}
{{/each}}
    <div>
      <button @click="$emit('edit-canceled')">Cancel</button>
      <button
        :disabled="!is{{pascal_case entry_type.name}}Valid" @click="update{{pascal_case entry_type.name}}"
      >
        Edit {{pascal_case entry_type.name}}
      </button>
    </div>
  </section>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, inject, defineEmits } from "vue";
import { Record, ActionHash, EntryHash } from '@holochain/client';
import { decode } from '@msgpack/msgpack';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
import { ClientKey } from "../../clientProvider";
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector" ) )}}
const {{camel_case field_name}} = ref<{{> (concat field_type.type "/type")}}>();
    {{else}}
      {{#if (eq field_type.type "u8")}}
const {{camel_case field_name}} = ref<Uint8Array>();
      {{else}}
const {{camel_case field_name}} = ref<Array<{{> (concat field_type.type "/type")}}>>([]);
      {{/if}}
    {{/if}}
  {{/if}}
{{/each}}

const props = defineProps<{
{{#if link_from_original_to_each_update}}
  original{{pascal_case entry_type.name}}Hash: ActionHash | EntryHash,
{{/if}}
  currentRecord: Record
}>();

const emit = defineEmits<{
  '{{kebab_case entry_type.name}}-updated': [hash: Uint8Array],
  'edit-canceled': []
}>();

const is{{pascal_case entry_type.name}}Valid = computed(() => {
  return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(camel_case field_name) }}{{/if}}{{#if (eq cardinality "vector")}} && {{camel_case field_name}}.value.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
});
const current{{pascal_case entry_type.name}} = computed(() => {
  return decode((props.currentRecord.entry as any).Present.entry) as {{pascal_case entry_type.name}};
});

const { client } = inject(ClientKey)!;

const update{{pascal_case entry_type.name}} = async () => {
  const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = {
{{#each entry_type.fields}}
  {{#if widget}}
    {{snake_case field_name}}: {{camel_case field_name}}.value!,
  {{else}}
    {{snake_case field_name}}: current{{pascal_case ../entry_type.name}}.{{snake_case field_name}},
  {{/if}}
{{/each}}
  };

  try {
    const updateRecord: Record = await client.value?.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'update_{{snake_case entry_type.name}}',
      payload: {
{{#if link_from_original_to_each_update}}
        original_{{snake_case entry_type.name}}_hash: props.original{{pascal_case entry_type.name}}Hash,
{{/if}}
        previous_{{snake_case entry_type.name}}_hash: props.currentRecord.signed_action.hashed.hash,
        updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
      }
    });
    emit('{{kebab_case entry_type.name}}-updated', updateRecord.signed_action.hashed.hash);
  } catch(e) {
    alert(e.message);
  }
}

onMounted(() => {
  if (!props.currentRecord) {
    throw new Error(`The currentRecord input is required for the Edit{{pascal_case entry_type.name}} element`);
  }
  {{#if link_from_original_to_each_update}}
  if (!props.original{{pascal_case entry_type.name}}Hash) {
    throw new Error(`The original{{pascal_case entry_type.name}}Hash input is required for the Edit{{pascal_case entry_type.name}} element`);
  }
  {{/if}}
});
</script>