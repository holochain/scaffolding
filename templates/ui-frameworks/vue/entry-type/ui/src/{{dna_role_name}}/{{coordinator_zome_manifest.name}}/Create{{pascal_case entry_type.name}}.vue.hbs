<template>
  <div>
    <h3>Create {{title_case entry_type.name}}</h3>

{{#each entry_type.fields}}
  {{#if widget}}
    <div>
    {{#if (not (eq cardinality "vector") )}}
      {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(camel_case field_name) variable_to_change=(camel_case field_name) required=(eq cardinality "single")}}
    {{else}}
      {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
    {{/if}}
    </div>
 {{/if}}
{{/each}}

    <button :disabled="!is{{pascal_case entry_type.name}}Valid" @click="create{{pascal_case entry_type.name}}">
      Create {{pascal_case entry_type.name}}
    </button>
  </div>
</template>

<script setup lang="ts">
import { inject, ref, computed, defineProps } from 'vue';
import { Record, ActionHash, EntryHash, DnaHash } from '@holochain/client';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
import { ClientKey } from "../../clientProvider";
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector" ) )}}
const {{camel_case field_name}} = ref<{{> (concat field_type.type "/type")}}{{#if (eq cardinality "option")}}| undefined{{/if}}>();
    {{else}}
      {{#if (eq field_type.type "u8")}}
const {{camel_case field_name}} = ref<Uint8Array>();
      {{else}}
const {{camel_case field_name}} = ref<Array<{{> (concat field_type.type "/type")}}>>();
      {{/if}}
    {{/if}}
  {{/if}}
{{/each}}

const { {{#each entry_type.fields}} {{#if (not widget)}} {{camel_case field_name}}, {{/if}} {{/each}} } = defineProps<{
  {{#each entry_type.fields}}
    {{#if (not widget)}}
    {{camel_case field_name}}{{#if (eq cardinality "option")}}?{{/if}}: {{> (concat field_type.type "/type")}},
    {{/if}}
  {{/each}}
}>();

const { client } = inject(ClientKey)!;

const is{{pascal_case entry_type.name}}Valid = computed(() => {
  return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat "" (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && {{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
});

const emit = defineEmits<{ '{{kebab_case entry_type.name}}-created': [hash: Uint8Array] }>();

const create{{pascal_case entry_type.name}} = async () => {
  const new{{pascal_case entry_type.name}}: {{pascal_case entry_type.name}} = {
{{#each entry_type.fields}}
  {{#if (eq cardinality "single") }}
    {{#if (not widget)}}
    {{snake_case field_name}}: {{camel_case field_name}},
    {{else}}
    {{snake_case field_name}}: {{camel_case field_name}}.value!,
    {{/if}}
  {{else}}
    {{snake_case field_name}}: {{camel_case field_name}}{{#if (eq cardinality "vector") }}{{#if field_type.type "u8"}} as Uint8Array{{else}}as Array<{{> (concat field_type.type "/type") }}>{{/if}}{{/if}},
  {{/if}}
{{/each}}
  };

  try {
    const record: Record = await client.value?.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'create_{{snake_case entry_type.name}}',
      payload: new{{pascal_case entry_type.name}},
    });
    emit('{{kebab_case entry_type.name}}-created', record.signed_action.hashed.hash);
  } catch(e) {
    alert(e.message);
  }
}
</script>