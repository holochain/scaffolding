<template>
  <progress v-if="loading"></progress>
  <div v-else>
    <div class="alert" v-if="error">Error fetching the {{lower_case (plural from_referenceable.name)}}: {{{{raw}}}} {{error.message}}.{{{{/raw}}}}</div>
    <div v-else-if="hashes && hashes.length > 0">
      <{{pascal_case from_referenceable.name}}Detail
        v-for="(hash, i) in hashes"
        :key="i"
        :{{kebab_case from_referenceable.name}}-hash="hash"
      >
      </{{pascal_case from_referenceable.name}}Detail>
    </div>
    <div class="alert" v-else>No {{lower_case (plural from_referenceable.name)}} found for this {{lower_case to_referenceable.name}}.</div>
  </div>
</template>

<script lang="ts">
import { toRaw, inject, ComputedRef, defineComponent } from 'vue';
import { decode } from '@msgpack/msgpack';
import { Link, AppClient, Record, AgentPubKey, EntryHash, ActionHash, NewEntryAction, HolochainError } from '@holochain/client';
import {{pascal_case from_referenceable.name}}Detail from './{{pascal_case from_referenceable.name}}Detail.vue';
import { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

export default defineComponent({
  components: {
    {{pascal_case from_referenceable.name}}Detail,
  },
  props: {
    {{camel_case to_referenceable.singular_arg}}: {
      type: Object,
      required: true
    }
  },
  data(): { hashes: Array<{{from_referenceable.hash_type}}> | undefined; loading: boolean; error: any } {
    return {
      hashes: undefined,
      loading: false,
      error: undefined
    }
  },
  async mounted() {
    if (!this.{{camel_case to_referenceable.singular_arg}}) {
      throw new Error(`The {{camel_case to_referenceable.singular_arg}} input is required for the {{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}} element`);
    }

    try {
      this.loading = true;
      const links: Array<Link> = await this.client.callZome({
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'get_{{snake_case (plural from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}',
        payload: this.{{camel_case to_referenceable.singular_arg}},
      });
      this.hashes = links.map(l => l.target);
    } catch (e) {
      this.error = e as HolochainError;
    } finally {
      this.loading = false;
    }

    toRaw(this.client)?.on('signal', signal => {
      if (signal.type !== "app") return;
      if (signal.value.zome_name !== '{{coordinator_zome_manifest.name}}') return;
      const payload = signal.value.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
      if (payload.type !== 'LinkCreated') return;
      if (payload.link_type !== '{{pascal_case bidirectional}}') return;

      if (this.hashes) this.hashes.push(payload.action.hashed.content.target_address);
    });
  },
  setup() {
    const client = (inject('client') as ComputedRef<AppClient>).value;
    return { client };
  },
});
</script>