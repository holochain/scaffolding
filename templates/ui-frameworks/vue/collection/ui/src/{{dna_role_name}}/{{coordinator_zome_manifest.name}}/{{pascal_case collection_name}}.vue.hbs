<template>
  <progress v-if="loading"></progress>
  <div v-else>
    <div class="alert" v-if="error">Error fetching the {{lower_case (plural referenceable.name)}}: {{{{raw}}}} {{error.message}}.{{{{/raw}}}}</div>
    <div v-else-if="hashes && hashes.length > 0">
      <{{pascal_case referenceable.name}}Detail
        v-for="(hash, i) in hashes"
        :key="i"
        :{{kebab_case referenceable.name}}-hash="hash"
        @{{kebab_case referenceable.name}}-deleted="fetch{{pascal_case referenceable.name}}()"
      >
      </{{pascal_case referenceable.name}}Detail>
    </div>
    <div class="alert" v-else>No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</div>
  </div>
</template>

<script lang="ts">
import { inject, toRaw, ComputedRef, defineComponent } from 'vue';
import { decode } from '@msgpack/msgpack';
import { AppClient, NewEntryAction, Link, Record, AgentPubKey, EntryHash, ActionHash, HolochainError } from '@holochain/client';
import {{pascal_case referenceable.name}}Detail from './{{pascal_case referenceable.name}}Detail.vue';
import { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

export default defineComponent({
  components: {
    {{pascal_case referenceable.name}}Detail,
  },
{{#if (eq collection_type.type "ByAuthor")}}
  props: {
    author: {
      type: Object,
      required: true
    }
  },
{{/if}}
  data(): { hashes: Array<{{referenceable.hash_type}}> | undefined; loading: boolean; error: any } {
    return {
      hashes: undefined,
      loading: false,
      error: undefined
    }
  },
  async mounted() {
  {{#if (eq collection_type.type "ByAuthor")}}
    if (!this.author) {
      throw new Error(`The author property is required for the {{pascal_case collection_name}} element`);
    }

  {{/if}}
    await this.fetch{{pascal_case referenceable.name}}();
    toRaw(this.client)?.on('signal', signal => {
      if (signal.type !== "app") return;
      if (signal.value.zome_name !== '{{coordinator_zome_manifest.name}}') return;
      const payload = signal.value.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
      if (payload.type !== 'EntryCreated') return;
      if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
    {{#if (eq collection_type.type "ByAuthor")}}
      if (this.author.toString() !== this.client.myPubKey.toString()) return;
    {{/if}}
      if (this.hashes) this.hashes.push({{#if (eq referenceable.hash_type "ActionHash")}}payload.action.hashed.hash{{else}}(payload.action.hashed.content as NewEntryAction).entry_hash{{/if}});
    });
  },
  methods: {
    async fetch{{pascal_case referenceable.name}}() {
      try {
        this.loading = true;
        const links: Array<Link> = await this.client.callZome({
          role_name: '{{dna_role_name}}',
          zome_name: '{{snake_case coordinator_zome_manifest.name}}',
          fn_name: 'get_{{snake_case collection_name}}',
          {{#if (eq collection_type.type "ByAuthor")}}payload: this.author,{{/if}}
        });
        this.hashes = links.map(l => l.target);
      } catch (e) {
        this.error = e as HolochainError;
      } finally {
        this.loading = false;
      }
    }
  },
  setup() {
    const client = (inject('client') as ComputedRef<AppClient>).value;
    return { client };
  },
});
</script>