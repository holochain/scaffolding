<template>
  <progress v-if="loading"></progress>
  <div v-else>
    <div class="alert" v-if="error">Error fetching the {{lower_case (plural referenceable.name)}}: {{{{raw}}}} {{error.message}}.{{{{/raw}}}}</div>
    <div v-else-if="hashes && hashes.length > 0">
      <{{pascal_case referenceable.name}}Detail
        v-for="(hash, i) in hashes"
        :key="i"
        :{{kebab_case referenceable.name}}-hash="hash"
        @{{kebab_case referenceable.name}}-deleted="fetch{{pascal_case referenceable.name}}()"
      >
      </{{pascal_case referenceable.name}}Detail>
    </div>
    <div class="alert" v-else>No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, toRaw, inject{{#if (eq collection_type.type "ByAuthor")}}, defineProps{{/if}} } from 'vue';
import { NewEntryAction, Link, AgentPubKey, ActionHash, HolochainError } from '@holochain/client';
import {{pascal_case referenceable.name}}Detail from './{{pascal_case referenceable.name}}Detail.vue';
import { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';
import { ClientKey } from '../../clientProvider';

const hashes = ref<Array<ActionHash> | undefined>(undefined);
const loading = ref(false);
const error = ref<HolochainError | undefined>(undefined);

{{#if (eq collection_type.type "ByAuthor")}}
const props = defineProps<{author: AgentPubKey}>();
{{/if}}

const { client } = inject(ClientKey)!;

const fetch{{pascal_case referenceable.name}} = async () => {
  try {
    loading.value = true;
    const links: Array<Link> = await client.value?.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{snake_case coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case collection_name}}',
      {{#if (eq collection_type.type "ByAuthor")}}payload: props.author,{{/if}}
    });
    hashes.value = links.map(l => l.target);
  } catch(e) {
    error.value = e;
  } finally {
    loading.value = false;
  }
}

onMounted(async () => {
  await fetch{{pascal_case referenceable.name}}();

  toRaw(client.value)?.on('signal', signal => {
    if (signal.type !== "app") return;
    if (signal.value.zome_name !== '{{coordinator_zome_manifest.name}}') return;
    const payload = signal.value.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
    if (payload.type !== 'EntryCreated') return;
    if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
  {{#if (eq collection_type.type "ByAuthor")}}
    if (props.author.toString() !== client.value?.myPubKey.toString()) return;
  {{/if}}
    if (hashes.value) hashes.value.push({{#if (eq referenceable.hash_type "ActionHash")}}payload.action.hashed.hash{{else}}(payload.action.hashed.content as NewEntryAction).entry_hash{{/if}});
  });
});
</script>