import { assert, test } from "vitest";

import { runScenario, dhtSync, CallableCell } from '@holochain/tryorama';
import {
  NewEntryAction,
  ActionHash,
  Record,
  Link,
  AppBundleSource,
  fakeActionHash,
  fakeAgentPubKey,
  fakeEntryHash
} from '@holochain/client';
import { decode } from '@msgpack/msgpack';

import { create{{pascal_case referenceable.name}} } from './common.js';

test('create a {{pascal_case referenceable.name}} and get {{lower_case collection_name}}', async () => {
  await runScenario(async scenario => {
    // Construct proper paths for your app.
    // This assumes app bundle created by the `hc app pack` command.
    const testAppPath = process.cwd() + '/../workdir/{{app_name}}.happ';

    // Set up the app to be installed
    const appBundleSource: AppBundleSource = { type: "path", value: testAppPath };
    const appSource = { appBundleSource };

    // Add 2 players with the test app to the Scenario. The returned players
    // can be destructured.
    const [alice, bob] = await scenario.addPlayersWithApps([appSource, appSource]);

    // Shortcut peer discovery through gossip and register all agents in every
    // conductor of the scenario.
    await scenario.shareAllAgents();

    // Bob gets {{lower_case collection_name}}
    let collectionOutput: Link[] = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_{{snake_case collection_name}}",
      {{#if (eq collection_type.type "ByAuthor")}}alice.agentPubKey,{{/if}}
    });
    assert.equal(collectionOutput.length, 0);

    // Alice creates a {{pascal_case referenceable.name}}
    const createRecord: Record = await create{{pascal_case referenceable.name}}(alice.cells[0]);
    assert.ok(createRecord);

    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

    // Bob gets {{lower_case collection_name}} again
    collectionOutput = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_{{snake_case collection_name}}",
      payload: {{#if (eq collection_type.type "Global")}}null{{else}}alice.agentPubKey{{/if}}
    });
    assert.equal(collectionOutput.length, 1);
    assert.deepEqual({{#if (eq referenceable.hash_type "EntryHash")}}(createRecord.signed_action.hashed.content as NewEntryAction).entry_hash{{else}}createRecord.signed_action.hashed.hash{{/if}}, collectionOutput[0].target);
{{#if (and deletable (eq referenceable.hash_type "ActionHash"))}}

    // Alice deletes the {{pascal_case referenceable.name}}
    await alice.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "delete_{{snake_case referenceable.name}}",
      payload: createRecord.signed_action.hashed.hash
    });

    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

    // Bob gets {{lower_case collection_name}} again
    collectionOutput = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_{{snake_case collection_name}}",
      payload: {{#if (eq collection_type.type "Global")}}null{{else}}alice.agentPubKey{{/if}}
    });
    assert.equal(collectionOutput.length, 0);
{{/if}}
  });
});