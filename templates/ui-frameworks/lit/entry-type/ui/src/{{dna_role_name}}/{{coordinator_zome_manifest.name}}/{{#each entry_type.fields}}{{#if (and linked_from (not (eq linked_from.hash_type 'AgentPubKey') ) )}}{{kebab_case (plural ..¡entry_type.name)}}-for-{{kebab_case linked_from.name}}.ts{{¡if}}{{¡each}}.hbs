import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, Record, Link, AppClient, EntryHash, ActionHash, AgentPubKey } from '@holochain/client';
import { consume } from '@lit/context';
import { Task } from '@lit/task';

import { sharedStyles } from '../../shared-styles';
import { clientContext } from '../../contexts';
import { {{pascal_case ../coordinator_zome_manifest.name}}Signal } from './types';

import './{{kebab_case ../entry_type.name}}-detail';

@customElement('{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}')
export class {{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name }} extends LitElement {
  @consume({ context: clientContext })
  client!: AppClient;

  @property({
    hasChanged: (newVal: {{linked_from.hash_type}}, oldVal: {{linked_from.hash_type}}) => newVal.toString() !== oldVal?.toString()
  })
  {{camel_case linked_from.singular_arg}}!: {{linked_from.hash_type}};

  @state()
  hashes: Array<ActionHash> = [];

  _fetch{{pascal_case (plural ../entry_type.name)}} = new Task(this, ([{{camel_case linked_from.singular_arg}}]: readonly {{linked_from.hash_type}}[]) => this.client.callZome({
      role_name: '{{../dna_role_name}}',
      zome_name: '{{../coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}',
      payload: {{camel_case linked_from.singular_arg}},
  }) as Promise<Array<Link>>, () => [this.{{camel_case linked_from.singular_arg}}]);

  firstUpdated() {
    if (!this.{{camel_case linked_from.singular_arg}}) {
      throw new Error(`The {{camel_case linked_from.singular_arg}} property is required for the {{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}} element`);
    }

    this.client?.on('signal', signal => {
      if (signal.type !== "app") return;
      if (signal.value.zome_name !== '{{../coordinator_zome_manifest.name}}') return;
      const payload = signal.value.payload as {{pascal_case ../coordinator_zome_manifest.name}}Signal;
      if (!(payload.type === 'EntryCreated' && payload.app_entry.type === '{{pascal_case ../entry_type.name}}')) return;
      this._fetch{{pascal_case (plural ../entry_type.name)}}.run();
    })
  }

  renderList(hashes: Array<ActionHash>) {
    if (!hashes.length) return html`<div class="alert">No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case linked_from.name}}.</div>`;

    return html`
      <div>
        ${hashes.map(hash => html`
          <{{kebab_case ../entry_type.name}}-detail
            .{{camel_case ../entry_type.name}}Hash=${hash}
            @{{kebab_case ../entry_type.name}}-deleted=${() => { this._fetch{{pascal_case (plural ../entry_type.name)}}.run(); this.hashes = []; } }
          ></{{kebab_case ../entry_type.name}}-detail>
        `)}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case (plural ../entry_type.name)}}.render({
      pending: () => html`<progress></progress>`,
      complete: (links) => this.renderList([...this.hashes, ...links.map(l => l.target)]),
      error: (e: any) => html`<div class="alert">Error fetching {{lower_case (plural ../entry_type.name)}}: ${e.message}.</div>`
    });
  }

  static styles = sharedStyles;
}