import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { AppClient, AgentPubKey, Link, EntryHash, ActionHash, Record, NewEntryAction } from '@holochain/client';
import { consume } from '@lit/context';
import { Task } from '@lit/task';

import { sharedStyles } from '../../shared-styles';
import { clientContext } from '../../contexts';
import { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

import './{{kebab_case referenceable.name}}-detail';

@customElement('{{kebab_case collection_name}}')
export class {{pascal_case collection_name}} extends LitElement {
  @consume({ context: clientContext })
  client!: AppClient;

{{#if (eq collection_type.type "ByAuthor")}}
  @property({
    hasChanged: (newVal: AgentPubKey, oldVal: AgentPubKey) => newVal?.toString() !== oldVal?.toString()
  })
  author!: AgentPubKey;
{{/if}}

  @state()
  signaledHashes: Array<{{referenceable.hash_type}}> = [];

  _fetch{{pascal_case (plural referenceable.name)}} = new Task(this, ([{{#if (eq collection_type.type "ByAuthor")}}author{{/if}}]: any) => this.client.callZome({
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case collection_name}}',
      {{#if (eq collection_type.type "ByAuthor")}}payload: this.author,{{/if}}
  }) as Promise<Array<Link>>, () => [{{#if (eq collection_type.type "ByAuthor")}}this.author{{/if}}]);

  firstUpdated() {
{{#if (eq collection_type.type "ByAuthor")}}
    if (!this.author) {
      throw new Error(`The author property is required for the {{kebab_case collection_name}} element`);
    }
{{/if}}

    this.client?.on('signal', signal => {
      if (signal.type !== "app") return;
      if (signal.value.zome_name !== '{{coordinator_zome_manifest.name}}') return;
      const payload = signal.value.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
      if (payload.type !== 'EntryCreated') return;
      if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
{{#if (eq collection_type.type "ByAuthor")}}
      if (this.author.toString() !== this.client.myPubKey.toString()) return;
{{/if}}
      this.signaledHashes = [{{#if (eq referenceable.hash_type "ActionHash")}}payload.action.hashed.hash{{else}}(payload.action.hashed.content as NewEntryAction).entry_hash{{/if}}, ...this.signaledHashes];
    });
  }

  renderList(hashes: Array<{{referenceable.hash_type}}>) {
    if (!hashes.length) return html`<div class="alert">No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</div>`;

    return html`
      <div>
        ${hashes.map(hash => html`
          <{{kebab_case referenceable.name}}-detail
            .{{camel_case referenceable.name}}Hash=${hash}
            @{{kebab_case referenceable.name}}-deleted=${() => { this._fetch{{pascal_case (plural referenceable.name)}}.run(); this.signaledHashes = []; } }
          ></{{kebab_case referenceable.name}}-detail>
        `)}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case (plural referenceable.name)}}.render({
      pending: () => html`<progress></progress>`,
      complete: (links) => this.renderList([...this.signaledHashes, ...links.map(l => l.target)]),
      error: (e: any) => html`<div class="alert">Error fetching the {{lower_case (plural referenceable.name)}}: ${e.message}.</div>`
    });
  }

  static styles = sharedStyles;
}