import { assert, test } from "vitest";

import { runScenario, dhtSync, CallableCell } from '@holochain/tryorama';
import {
  NewEntryAction,
  ActionHash,
  Record,
  Link,
  CreateLink,
  DeleteLink,
  SignedActionHashed,
  AppBundleSource,
  fakeActionHash,
  fakeAgentPubKey,
  fakeEntryHash,
  hashFrom32AndType
} from '@holochain/client';
import { decode } from '@msgpack/msgpack';

{{#if (ne from_referenceable.hash_type "AgentPubKey") }}
  {{#if (ne from_referenceable.hash_type "ExternalHash")}}
import { create{{pascal_case from_referenceable.name}} } from './common.js';
  {{/if}}
{{/if}}
{{#if (ne to_referenceable.hash_type "AgentPubKey") }}
  {{#if (ne to_referenceable.hash_type "ExternalHash")}}
import { create{{pascal_case to_referenceable.name}} } from './common.js';
  {{/if}}
{{/if}}

test('link a {{pascal_case from_referenceable.name}} to a {{pascal_case to_referenceable.name}}', async () => {
  await runScenario(async scenario => {
    // Construct proper paths for your app.
    // This assumes app bundle created by the `hc app pack` command.
    const testAppPath = process.cwd() + '/../workdir/{{app_name}}.happ';

    // Set up the app to be installed
    const appSource = { appBundleSource: { type: "path", value: testAppPath } as AppBundleSource };

    // Add 2 players with the test app to the Scenario. The returned players
    // can be destructured.
    const [alice, bob] = await scenario.addPlayersWithApps([appSource, appSource]);

    // Shortcut peer discovery through gossip and register all agents in every
    // conductor of the scenario.
    await scenario.shareAllAgents();

{{#if (eq from_referenceable.hash_type "AgentPubKey")}}
    const baseAddress = alice.agentPubKey;
{{else}}
  {{#if (ne from_referenceable.hash_type "ExternalHash")}}
    const baseRecord = await create{{pascal_case from_referenceable.name}}(alice.cells[0]);
  {{/if}}
  {{#if (eq from_referenceable.hash_type "EntryHash")}}
    const baseAddress = (baseRecord.signed_action.hashed.content as NewEntryAction).entry_hash;
  {{else}}
    {{#if (eq from_referenceable.hash_type "ExternalHash")}}
    const baseAddress = hashFrom32AndType(new Uint8Array(39).fill(1), "External");
    {{else}}
    const baseAddress = baseRecord.signed_action.hashed.hash;
    {{/if}}
  {{/if}}
{{/if}}
{{#if (eq to_referenceable.hash_type "AgentPubKey")}}
    const targetAddress = alice.agentPubKey;
{{else}}
  {{#if (ne to_referenceable.hash_type "ExternalHash")}}
    const targetRecord = await create{{pascal_case to_referenceable.name}}(alice.cells[0]);
  {{else}}
  {{/if}}
  {{#if (eq to_referenceable.hash_type "EntryHash")}}
    const targetAddress = (targetRecord.signed_action.hashed.content as NewEntryAction).entry_hash;
  {{else}}
    {{#if (eq to_referenceable.hash_type "ExternalHash")}}
    const targetAddress = hashFrom32AndType(new Uint8Array(39).fill(1), "External");
    {{else}}
    const targetAddress = targetRecord.signed_action.hashed.hash;
    {{/if}}
  {{/if}}
{{/if}}

    // Bob gets the links, should be empty
    let linksOutput: Link[] = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_{{plural (snake_case to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}",
      payload: baseAddress
    });
    assert.equal(linksOutput.length, 0);

    // Alice creates a link from {{pascal_case from_referenceable.name}} to {{pascal_case to_referenceable.name}}
    await alice.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "add_{{snake_case to_referenceable.name}}_for_{{snake_case from_referenceable.name}}",
      payload: {
        base_{{snake_case from_referenceable.singular_arg}}: baseAddress,
        target_{{snake_case to_referenceable.singular_arg}}: targetAddress
      }
    });

    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

    // Bob gets the links again
    linksOutput = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_{{plural (snake_case to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}",
      payload: baseAddress
    });
    assert.equal(linksOutput.length, 1);
{{#if (ne to_referenceable.hash_type "AgentPubKey")}}
    assert.deepEqual(targetAddress, linksOutput[0].target);
{{/if}}

{{#if bidirectional}}

    // Bob gets the links in the inverse direction
    linksOutput = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_{{plural (snake_case from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}",
      payload: targetAddress
    });
    assert.equal(linksOutput.length, 1);
  {{#if (ne from_referenceable.hash_type "AgentPubKey")}}
    assert.deepEqual(baseAddress, linksOutput[0].target);
  {{/if}}
{{/if}}

{{#if delete}}
    await alice.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "delete_{{snake_case to_referenceable.name}}_for_{{snake_case from_referenceable.name}}",
      payload: {
        base_{{snake_case from_referenceable.singular_arg}}: baseAddress,
        target_{{snake_case to_referenceable.singular_arg}}: targetAddress
      }
    });

    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

    // Bob gets the links again
    linksOutput = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_{{plural (snake_case to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}",
      payload: baseAddress
    });
    assert.equal(linksOutput.length, 0);

    // Bob gets the deleted links
    let deletedLinksOutput: Array<[SignedActionHashed<CreateLink>, SignedActionHashed<DeleteLink>[]]> = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_deleted_{{plural (snake_case to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}",
      payload: baseAddress
    });
    assert.equal(deletedLinksOutput.length, 1);

  {{#if bidirectional}}
    // Bob gets the links in the inverse direction
    linksOutput = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_{{plural (snake_case from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}",
      payload: targetAddress
    });
    assert.equal(linksOutput.length, 0);

    // Bob gets the deleted links in the inverse direction
    deletedLinksOutput = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_deleted_{{plural (snake_case from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}",
      payload: targetAddress
    });
    assert.equal(deletedLinksOutput.length, 1);
  {{/if}}

{{/if}}
  });
});