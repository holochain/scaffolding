import { assert, test } from "vitest";

import { runScenario, dhtSync, CallableCell } from '@holochain/tryorama';
import {
  NewEntryAction,
  ActionHash,
  Record,
  Link,
  CreateLink,
  DeleteLink,
  SignedActionHashed,
  AppBundleSource,
  fakeActionHash,
  fakeAgentPubKey,
  fakeEntryHash
} from '@holochain/client';
import { decode } from '@msgpack/msgpack';

import { create{{pascal_case entry_type.name}}, sample{{pascal_case entry_type.name}} } from './common.js';

test('create {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    // Construct proper paths for your app.
    // This assumes app bundle created by the `hc app pack` command.
    const testAppPath = process.cwd() + '/../workdir/{{app_name}}.happ';

    // Set up the app to be installed
    const appSource = { appBundleSource: { type: "path", value: testAppPath } as AppBundleSource };

    // Add 2 players with the test app to the Scenario. The returned players
    // can be destructured.
    const [alice, bob] = await scenario.addPlayersWithApps([appSource, appSource]);

    // Shortcut peer discovery through gossip and register all agents in every
    // conductor of the scenario.
    await scenario.shareAllAgents();

    // Alice creates a {{pascal_case entry_type.name}}
    const record: Record = await create{{pascal_case entry_type.name}}(alice.cells[0]);
    assert.ok(record);
  });
});

test('create and read {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    // Construct proper paths for your app.
    // This assumes app bundle created by the `hc app pack` command.
    const testAppPath = process.cwd() + '/../workdir/{{app_name}}.happ';

    // Set up the app to be installed
    const appSource = { appBundleSource: { type: "path", value: testAppPath } as AppBundleSource };

    // Add 2 players with the test app to the Scenario. The returned players
    // can be destructured.
    const [alice, bob] = await scenario.addPlayersWithApps([appSource, appSource]);

    // Shortcut peer discovery through gossip and register all agents in every
    // conductor of the scenario.
    await scenario.shareAllAgents();

    const sample = await sample{{pascal_case entry_type.name}}(alice.cells[0]);

    // Alice creates a {{pascal_case entry_type.name}}
    const record: Record = await create{{pascal_case entry_type.name}}(alice.cells[0], sample);
    assert.ok(record);

    // Wait for the created entry to be propagated to the other node.
    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

    // Bob gets the created {{pascal_case entry_type.name}}
    const createReadOutput: Record = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "{{#if crud.update}}get_original_{{snake_case entry_type.name}}{{else}}get_{{snake_case entry_type.name}}{{/if}}",
      payload: {{#if entry_type.reference_entry_hash}}(record.signed_action.hashed.content as NewEntryAction).entry_hash{{else}}record.signed_action.hashed.hash{{/if}},
    });
    assert.deepEqual(sample, decode((createReadOutput.entry as any).Present.entry) as any);

  {{#each entry_type.fields}}
    {{#if linked_from}}
      {{#if (ne (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
    // Bob gets the {{pascal_case (plural linked_from.name)}} for the new {{pascal_case ../entry_type.name}}
    let linksTo{{pascal_case (plural linked_from.name)}}: Link[] = await bob.cells[0].callZome({
      zome_name: "{{../coordinator_zome_manifest.name}}",
      fn_name: "get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}",
      payload: {{#if (eq cardinality "vector")}}sample.{{field_name}}[0]{{else}}sample.{{field_name}}{{/if}}
    });
    assert.equal(linksTo{{pascal_case (plural linked_from.name)}}.length, 1);
    assert.deepEqual(linksTo{{pascal_case (plural linked_from.name)}}[0].target, {{#if ../entry_type.reference_entry_hash}}(record.signed_action.hashed.content as NewEntryAction).entry_hash{{else}}record.signed_action.hashed.hash{{/if}});
      {{/if}}
    {{/if}}
  {{/each}}
  });
});

{{#if crud.update}}
test('create and update {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    // Construct proper paths for your app.
    // This assumes app bundle created by the `hc app pack` command.
    const testAppPath = process.cwd() + '/../workdir/{{app_name}}.happ';

    // Set up the app to be installed
    const appSource = { appBundleSource: { type: "path", value: testAppPath } as AppBundleSource };

    // Add 2 players with the test app to the Scenario. The returned players
    // can be destructured.
    const [alice, bob] = await scenario.addPlayersWithApps([appSource, appSource]);

    // Shortcut peer discovery through gossip and register all agents in every
    // conductor of the scenario.
    await scenario.shareAllAgents();

    // Alice creates a {{pascal_case entry_type.name}}
    const record: Record = await create{{pascal_case entry_type.name}}(alice.cells[0]);
    assert.ok(record);

    const originalActionHash = record.signed_action.hashed.hash;

    // Alice updates the {{pascal_case entry_type.name}}
    let contentUpdate: any = await sample{{pascal_case entry_type.name}}(alice.cells[0]);
    let updateInput = {
{{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: originalActionHash,
{{/if}}
      previous_{{snake_case entry_type.name}}_hash: originalActionHash,
      updated_{{snake_case entry_type.name}}: contentUpdate,
    };

    let updatedRecord: Record = await alice.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "update_{{snake_case entry_type.name}}",
      payload: updateInput,
    });
    assert.ok(updatedRecord);

    // Wait for the updated entry to be propagated to the other node.
    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

    // Bob gets the updated {{pascal_case entry_type.name}}
    const readUpdatedOutput0: Record = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_latest_{{snake_case entry_type.name}}",
      payload: updatedRecord.signed_action.hashed.hash,
    });
    assert.deepEqual(contentUpdate, decode((readUpdatedOutput0.entry as any).Present.entry) as any);

    // Alice updates the {{pascal_case entry_type.name}} again
    contentUpdate = await sample{{pascal_case entry_type.name}}(alice.cells[0]);
    updateInput = {
{{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: originalActionHash,
{{/if}}
      previous_{{snake_case entry_type.name}}_hash: updatedRecord.signed_action.hashed.hash,
      updated_{{snake_case entry_type.name}}: contentUpdate,
    };

    updatedRecord = await alice.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "update_{{snake_case entry_type.name}}",
      payload: updateInput,
    });
    assert.ok(updatedRecord);

    // Wait for the updated entry to be propagated to the other node.
    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

    // Bob gets the updated {{pascal_case entry_type.name}}
    const readUpdatedOutput1: Record = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_latest_{{snake_case entry_type.name}}",
      payload: updatedRecord.signed_action.hashed.hash,
    });
    assert.deepEqual(contentUpdate, decode((readUpdatedOutput1.entry as any).Present.entry) as any);

    // Bob gets all the revisions for {{pascal_case entry_type.name}}
    const revisions: Record[] = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_all_revisions_for_{{snake_case entry_type.name}}",
      payload: originalActionHash,
    });
    assert.equal(revisions.length, 3);
    assert.deepEqual(contentUpdate, decode((revisions[2].entry as any).Present.entry) as any);
  });
});
{{/if}}

{{#if crud.delete}}
test('create and delete {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    // Construct proper paths for your app.
    // This assumes app bundle created by the `hc app pack` command.
    const testAppPath = process.cwd() + '/../workdir/{{app_name}}.happ';

    // Set up the app to be installed
    const appSource = { appBundleSource: { type: "path", value: testAppPath } as AppBundleSource };

    // Add 2 players with the test app to the Scenario. The returned players
    // can be destructured.
    const [alice, bob] = await scenario.addPlayersWithApps([appSource, appSource]);

    // Shortcut peer discovery through gossip and register all agents in every
    // conductor of the scenario.
    await scenario.shareAllAgents();

    const sample = await sample{{pascal_case entry_type.name}}(alice.cells[0]);

    // Alice creates a {{pascal_case entry_type.name}}
    const record: Record = await create{{pascal_case entry_type.name}}(alice.cells[0], sample);
    assert.ok(record);

    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

  {{#each entry_type.fields}}
    {{#if linked_from}}
      {{#if (ne (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
    // Bob gets the {{pascal_case (plural linked_from.name)}} for the new {{pascal_case ../entry_type.name}}
    let linksTo{{pascal_case (plural linked_from.name)}}: Link[] = await bob.cells[0].callZome({
      zome_name: "{{../coordinator_zome_manifest.name}}",
      fn_name: "get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}",
      payload: {{#if (eq cardinality "vector")}}sample.{{field_name}}[0]{{else}}sample.{{field_name}}{{/if}}
    });
    assert.equal(linksTo{{pascal_case (plural linked_from.name)}}.length, 1);
    assert.deepEqual(linksTo{{pascal_case (plural linked_from.name)}}[0].target, {{#if ../entry_type.reference_entry_hash}}(record.signed_action.hashed.content as NewEntryAction).entry_hash{{else}}record.signed_action.hashed.hash{{/if}});
      {{/if}}
    {{/if}}
  {{/each}}

    // Alice deletes the {{pascal_case entry_type.name}}
    const deleteActionHash = await alice.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "delete_{{snake_case entry_type.name}}",
      payload: record.signed_action.hashed.hash,
    });
    assert.ok(deleteActionHash);

    // Wait for the entry deletion to be propagated to the other node.
    await dhtSync([alice, bob], alice.cells[0].cell_id[0]);

    // Bob gets the oldest delete for the {{pascal_case entry_type.name}}
    const oldestDeleteFor{{pascal_case entry_type.name}}: SignedActionHashed = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_oldest_delete_for_{{snake_case entry_type.name}}",
      payload: record.signed_action.hashed.hash,
    });
    assert.ok(oldestDeleteFor{{pascal_case entry_type.name}});

    // Bob gets the deletions for the {{pascal_case entry_type.name}}
    const deletesFor{{pascal_case entry_type.name}}: SignedActionHashed[] = await bob.cells[0].callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "get_all_deletes_for_{{snake_case entry_type.name}}",
      payload: record.signed_action.hashed.hash,
    });
    assert.equal(deletesFor{{pascal_case entry_type.name}}.length, 1);

  {{#each entry_type.fields}}
    {{#if linked_from}}
      {{#if (ne (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
    // Bob gets the {{pascal_case (plural linked_from.name)}} for the {{pascal_case ../entry_type.name}} again
    linksTo{{pascal_case (plural linked_from.name)}} = await bob.cells[0].callZome({
      zome_name: "{{../coordinator_zome_manifest.name}}",
      fn_name: "get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}",
      payload: {{#if (eq cardinality "vector")}}sample.{{field_name}}[0]{{else}}sample.{{field_name}}{{/if}}
    });
    assert.equal(linksTo{{pascal_case (plural linked_from.name)}}.length, 0);

    // Bob gets the deleted {{pascal_case (plural linked_from.name)}} for the {{pascal_case ../entry_type.name}}
    const deletedLinksTo{{pascal_case (plural linked_from.name)}}: Array<[SignedActionHashed<CreateLink>, SignedActionHashed<DeleteLink>[]]> = await bob.cells[0].callZome({
      zome_name: "{{../coordinator_zome_manifest.name}}",
      fn_name: "get_deleted_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}",
      payload: {{#if (eq cardinality "vector")}}sample.{{field_name}}[0]{{else}}sample.{{field_name}}{{/if}}
    });
    assert.equal(deletedLinksTo{{pascal_case (plural linked_from.name)}}.length, 1);
      {{/if}}
    {{/if}}
  {{/each}}

  });
});
{{/if}}